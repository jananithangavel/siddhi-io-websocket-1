{
    "docs": [
        {
            "location": "/", 
            "text": "siddhi-io-websocket\n\n\nThe \nsiddhi-io-websocket extension\n is an extension to \nSiddhi\n\n  that allows to receive and publish events through WebSocket.\n\n\nFind some useful links below:\n\n\n\n\nSource code\n\n\nReleases\n\n\nIssue tracker\n\n\n\n\nLatest API Docs\n\n\nLatest API Docs is \n1.0.4-SNAPSHOT\n.\n\n\nHow to use\n\n\nUsing the extension in \nWSO2 Stream Processor\n\n\n\n\n\n\nYou can use this extension in the latest \nWSO2 Stream Processor\n that is a part of \nWSO2 Analytics\n offering, with editor, debugger and simulation support. \n\n\n\n\n\n\nThis extension is shipped by default with WSO2 Stream Processor, if you wish to use an alternative version of this extension you can replace the component \njar\n that can be found in the \nSTREAM_PROCESSOR_HOME\n/lib\n directory.\n\n\n\n\n\n\nUsing the extension as a \njava library\n\n\n\n\nThis extension can be added as a maven dependency along with other Siddhi dependencies to your project.\n\n\n\n\n     \ndependency\n\n        \ngroupId\norg.wso2.extension.siddhi.io.websocket\n/groupId\n\n        \nartifactId\nsiddhi-io-websocket\n/artifactId\n\n        \nversion\nx.x.x\n/version\n\n     \n/dependency\n\n\n\n\n\nJenkins Build Status\n\n\n\n\n\n\n\n\n\n\nBranch\n\n\nBuild Status\n\n\n\n\n\n\n\n\n\n\nmaster\n\n\n\n\n\n\n\n\n\n\n\n\nFeatures\n\n\n\n\nwebsocket\n \n(\n(Sink)\n)\nA Siddhi application can be configured to publish events via the Websocket transport by adding the @Sink(type = 'websocket') annotation at the top of an event stream definition.\n\n\nwebsocket-server\n \n(\n(Sink)\n)\nA Siddhi application can be configured to publish events via the WebSocket transport by adding the @Sink(type = 'websocket-server') annotation at the top of an event stream definition.\n\n\nwebsocket\n \n(\n(Source)\n)\nA Siddhi application can be configured to receive events via the WebSocket by adding the @Source(type = 'websocket') annotation at the top of an event stream definition.\nWhen this is defined the associated stream will receive events from the WebSocket server on the url defined in the system.\n\n\nwebsocket-server\n \n(\n(Source)\n)\nA Siddhi application can be configured to receive events via the WebSocket by adding the @Source(type = 'websocket-server') annotation at the top of an event stream definition.\n\n\n\n\nHow to Contribute\n\n\n\n\n\n\nPlease report issues at \nGitHub Issue Tracker\n.\n\n\n\n\n\n\nSend your contributions as pull requests to \nmaster branch\n. \n\n\n\n\n\n\nContact us\n\n\n\n\n\n\nPost your questions with the \n\"Siddhi\"\n tag in \nStackoverflow\n. \n\n\n\n\n\n\nSiddhi developers can be contacted via the mailing lists:\n\n\nDevelopers List   : \ndev@wso2.org\n\n\nArchitecture List : \narchitecture@wso2.org\n\n\n\n\n\n\nSupport\n\n\n\n\n\n\nWe are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology. \n\n\n\n\n\n\nFor more details and to take advantage of this unique opportunity contact us via \nhttp://wso2.com/support/\n.", 
            "title": "Welcome to WSO2 Siddhi IO Websocket"
        }, 
        {
            "location": "/#siddhi-io-websocket", 
            "text": "The  siddhi-io-websocket extension  is an extension to  Siddhi \n  that allows to receive and publish events through WebSocket.  Find some useful links below:   Source code  Releases  Issue tracker", 
            "title": "siddhi-io-websocket"
        }, 
        {
            "location": "/#latest-api-docs", 
            "text": "Latest API Docs is  1.0.4-SNAPSHOT .", 
            "title": "Latest API Docs"
        }, 
        {
            "location": "/#how-to-use", 
            "text": "Using the extension in  WSO2 Stream Processor    You can use this extension in the latest  WSO2 Stream Processor  that is a part of  WSO2 Analytics  offering, with editor, debugger and simulation support.     This extension is shipped by default with WSO2 Stream Processor, if you wish to use an alternative version of this extension you can replace the component  jar  that can be found in the  STREAM_PROCESSOR_HOME /lib  directory.    Using the extension as a  java library   This extension can be added as a maven dependency along with other Siddhi dependencies to your project.         dependency \n         groupId org.wso2.extension.siddhi.io.websocket /groupId \n         artifactId siddhi-io-websocket /artifactId \n         version x.x.x /version \n      /dependency", 
            "title": "How to use"
        }, 
        {
            "location": "/#jenkins-build-status", 
            "text": "Branch  Build Status      master", 
            "title": "Jenkins Build Status"
        }, 
        {
            "location": "/#features", 
            "text": "websocket   ( (Sink) ) A Siddhi application can be configured to publish events via the Websocket transport by adding the @Sink(type = 'websocket') annotation at the top of an event stream definition.  websocket-server   ( (Sink) ) A Siddhi application can be configured to publish events via the WebSocket transport by adding the @Sink(type = 'websocket-server') annotation at the top of an event stream definition.  websocket   ( (Source) ) A Siddhi application can be configured to receive events via the WebSocket by adding the @Source(type = 'websocket') annotation at the top of an event stream definition. When this is defined the associated stream will receive events from the WebSocket server on the url defined in the system.  websocket-server   ( (Source) ) A Siddhi application can be configured to receive events via the WebSocket by adding the @Source(type = 'websocket-server') annotation at the top of an event stream definition.", 
            "title": "Features"
        }, 
        {
            "location": "/#how-to-contribute", 
            "text": "Please report issues at  GitHub Issue Tracker .    Send your contributions as pull requests to  master branch .", 
            "title": "How to Contribute"
        }, 
        {
            "location": "/#contact-us", 
            "text": "Post your questions with the  \"Siddhi\"  tag in  Stackoverflow .     Siddhi developers can be contacted via the mailing lists:  Developers List   :  dev@wso2.org  Architecture List :  architecture@wso2.org", 
            "title": "Contact us"
        }, 
        {
            "location": "/#support", 
            "text": "We are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology.     For more details and to take advantage of this unique opportunity contact us via  http://wso2.com/support/ .", 
            "title": "Support"
        }, 
        {
            "location": "/api/1.0.3/", 
            "text": "API Docs - v1.0.3\n\n\nSink\n\n\nwebsocket \n(Sink)\n\n\nA Siddhi application can be configured to publish events via the Websocket transport by adding the @Sink(type = ?websocket?) annotation at the top of an event stream definition.\n\n\n\nSyntax\n\n\n@sink(type=\nwebsocket\n, url=\nSTRING\n, sub.protocol=\nSTRING\n, headers=\nSTRING\n, idle.timeout=\nINT\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nurl\n\n        \nThe URL of the remote endpoint.\nThe url scheme should be either ?ws? or ?wss?.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsub.protocol\n\n        \nThe negotiable sub-protocol if server is asking for it.\nThe sub.protocol should adhere to \nsubprotocol1, subprotocol2,...\n format.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheaders\n\n        \nAny specific headers which need to send to the server.\nThe headers should adhere to \n'key1:value1', 'key2:value2',...\n format.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nidle.timeout\n\n        \nIdle timeout of the connection\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Sink(type = ?websocket?, url = 'ws://localhost:8025/abc', \n   @map(type='xml'))\ndefine stream Foo (attribute1 string, attribute2 int);\n\n\n\n\nA sink of type 'websocket' has been defined.\nAll events arriving at Foo stream via websocket will be sent to the url ws://localhost:8025/abc.\n\n\n\nwebsocket-server \n(Sink)\n\n\nA Siddhi application can be configured to publish events via the WebSocket transport by adding the @Sink(type = ?websocket-server?) annotation at the top of an event stream definition.\n\n\n\nSyntax\n\n\n@sink(type=\nwebsocket-server\n, host=\nSTRING\n, port=\nSTRING\n, sub.protocol=\nSTRING\n, idle.timeout=\nINT\n, tls.enabled=\nBOOL\n, keystore.path=\nSTRING\n, keystore.password=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nhost\n\n        \nhost of the WebSocket server\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nport\n\n        \nport of the WebSocket server\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsub.protocol\n\n        \nSub-Protocols which are allowed by the service.\nThe sub.protocol should adhere to \nsubprotocol1, subprotocol2,...\n format.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nidle.timeout\n\n        \nIdle timeout of the connection. If the idle.timeout = '-1' then the timer is disabled.\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.enabled\n\n        \nThis parameter specifies whether a secure connection is enabled or not. When this parameter is set to \ntrue\n, the \nkeystore.path\n and the \nkeystore.password\n parameters are initialized.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nkeystore.path\n\n        \nThe file path to the location of the keystore. If a custom keystore is not specified, then the system uses the default keystore file - wso2carbon.jks in the \n${carbon.home}/resources/security\n directory.\n\n        \n${carbon.home}/resources/security/wso2carbon.jks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nkeystore.password\n\n        \nThe password for the keystore. A custom password can be specified if required. If no custom password is specified, then the system uses \nwso2carbon\n as the default password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Sink(type = ?websocket-server?, host='localhost', port='9025', \n   @map(type='xml'))\ndefine stream Foo (attribute1 string, attribute2 int);\n\n\n\n\nA sink of type 'websocket-server' has been defined.\nAll events arriving at Foo stream via websocket-server will be sent to the url ws://localhost:9025/abc.\n\n\n\nSource\n\n\nwebsocket \n(Source)\n\n\nA Siddhi application can be configured to receive events via the WebSocket by adding the @Source(type = ?websocket?) annotation at the top of an event stream definition.\nWhen this is defined the associated stream will receive events from the WebSocket server on the url defined in the system.\n\n\n\nSyntax\n\n\n@source(type=\nwebsocket\n, url=\nSTRING\n, sub.protocol=\nSTRING\n, headers=\nSTRING\n, idle.timeout=\nINT\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nurl\n\n        \nThe URL of the remote endpoint.\nThe url scheme should be either ?ws? or ?wss?.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsub.protocol\n\n        \nThe negotiable sub-protocol if server is asking for it.\nThe sub.protocol should adhere to \nsubprotocol1, subprotocol2,...\n format.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheaders\n\n        \nAny specific headers which need to send to the server.\nThe headers should adhere to \n'key1:value1', 'key2:value2',...\n format.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nidle.timeout\n\n        \nIdle timeout of the connection\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Source(type = ?websocket?, url = 'ws://localhost:8025/websockets/abc', \n   @map(type='xml'))\ndefine stream Foo (attribute1 string, attribute2 int);\n\n\n\n\nUnder this configuration, events are received via the WebSocket server and they are passed to \nFoo\n stream for processing. \n\n\n\nwebsocket-server \n(Source)\n\n\nA Siddhi application can be configured to receive events via the WebSocket by adding the @Source(type = ?websocket-server?) annotation at the top of an event stream definition.\n\n\n\nSyntax\n\n\n@source(type=\nwebsocket-server\n, host=\nSTRING\n, port=\nSTRING\n, sub.protocol=\nSTRING\n, idle.timeout=\nINT\n, tls.enabled=\nBOOL\n, keystore.path=\nSTRING\n, keystore.password=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nhost\n\n        \nhost of the WebSocket server\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nport\n\n        \nport of the WebSocket server\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsub.protocol\n\n        \nSub-Protocols which are allowed by the service.\nThe sub.protocol should adhere to \nsubprotocol1, subprotocol2,...\n format.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nidle.timeout\n\n        \nIdle timeout of the connection. If the idle.timeout = '-1' then the timer is disabled.\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.enabled\n\n        \nThis parameter specifies whether a secure connection is enabled or not. When this parameter is set to \ntrue\n, the \nkeystore.path\n and the \nkeystore.password\n parameters are initialized.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nkeystore.path\n\n        \nThe file path to the location of the keystore. If a custom keystore is not specified, then the system uses the default keystore file - wso2carbon.jks in the \n${carbon.home}/resources/security\n directory.\n\n        \n${carbon.home}/resources/security/wso2carbon.jks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nkeystore.password\n\n        \nThe password for the keystore. A custom password can be specified if required. If no custom password is specified, then the system uses \nwso2carbon\n as the default password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Source(type = ?websocket-server?, host='localhost', port='8025', \n   @map(type='xml'))\ndefine stream Foo (attribute1 string, attribute2 int);\n\n\n\n\nUnder this configuration, events are received via the WebSocket server and they are passed to \nFoo\n stream for processing.", 
            "title": "1.0.3"
        }, 
        {
            "location": "/api/1.0.3/#api-docs-v103", 
            "text": "", 
            "title": "API Docs - v1.0.3"
        }, 
        {
            "location": "/api/1.0.3/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.0.3/#websocket-sink", 
            "text": "A Siddhi application can be configured to publish events via the Websocket transport by adding the @Sink(type = ?websocket?) annotation at the top of an event stream definition.  Syntax  @sink(type= websocket , url= STRING , sub.protocol= STRING , headers= STRING , idle.timeout= INT , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         url \n         The URL of the remote endpoint. The url scheme should be either ?ws? or ?wss?. \n         \n         STRING \n         No \n         No \n     \n     \n         sub.protocol \n         The negotiable sub-protocol if server is asking for it. The sub.protocol should adhere to  subprotocol1, subprotocol2,...  format. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         headers \n         Any specific headers which need to send to the server. The headers should adhere to  'key1:value1', 'key2:value2',...  format. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         idle.timeout \n         Idle timeout of the connection \n         -1 \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  @Sink(type = ?websocket?, url = 'ws://localhost:8025/abc', \n   @map(type='xml'))\ndefine stream Foo (attribute1 string, attribute2 int);  A sink of type 'websocket' has been defined. All events arriving at Foo stream via websocket will be sent to the url ws://localhost:8025/abc.", 
            "title": "websocket (Sink)"
        }, 
        {
            "location": "/api/1.0.3/#websocket-server-sink", 
            "text": "A Siddhi application can be configured to publish events via the WebSocket transport by adding the @Sink(type = ?websocket-server?) annotation at the top of an event stream definition.  Syntax  @sink(type= websocket-server , host= STRING , port= STRING , sub.protocol= STRING , idle.timeout= INT , tls.enabled= BOOL , keystore.path= STRING , keystore.password= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         host \n         host of the WebSocket server \n         \n         STRING \n         No \n         No \n     \n     \n         port \n         port of the WebSocket server \n         \n         STRING \n         No \n         No \n     \n     \n         sub.protocol \n         Sub-Protocols which are allowed by the service. The sub.protocol should adhere to  subprotocol1, subprotocol2,...  format. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         idle.timeout \n         Idle timeout of the connection. If the idle.timeout = '-1' then the timer is disabled. \n         -1 \n         INT \n         Yes \n         No \n     \n     \n         tls.enabled \n         This parameter specifies whether a secure connection is enabled or not. When this parameter is set to  true , the  keystore.path  and the  keystore.password  parameters are initialized. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         keystore.path \n         The file path to the location of the keystore. If a custom keystore is not specified, then the system uses the default keystore file - wso2carbon.jks in the  ${carbon.home}/resources/security  directory. \n         ${carbon.home}/resources/security/wso2carbon.jks \n         STRING \n         Yes \n         No \n     \n     \n         keystore.password \n         The password for the keystore. A custom password can be specified if required. If no custom password is specified, then the system uses  wso2carbon  as the default password. \n         wso2carbon \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @Sink(type = ?websocket-server?, host='localhost', port='9025', \n   @map(type='xml'))\ndefine stream Foo (attribute1 string, attribute2 int);  A sink of type 'websocket-server' has been defined. All events arriving at Foo stream via websocket-server will be sent to the url ws://localhost:9025/abc.", 
            "title": "websocket-server (Sink)"
        }, 
        {
            "location": "/api/1.0.3/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.3/#websocket-source", 
            "text": "A Siddhi application can be configured to receive events via the WebSocket by adding the @Source(type = ?websocket?) annotation at the top of an event stream definition. When this is defined the associated stream will receive events from the WebSocket server on the url defined in the system.  Syntax  @source(type= websocket , url= STRING , sub.protocol= STRING , headers= STRING , idle.timeout= INT , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         url \n         The URL of the remote endpoint. The url scheme should be either ?ws? or ?wss?. \n         \n         STRING \n         No \n         No \n     \n     \n         sub.protocol \n         The negotiable sub-protocol if server is asking for it. The sub.protocol should adhere to  subprotocol1, subprotocol2,...  format. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         headers \n         Any specific headers which need to send to the server. The headers should adhere to  'key1:value1', 'key2:value2',...  format. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         idle.timeout \n         Idle timeout of the connection \n         -1 \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  @Source(type = ?websocket?, url = 'ws://localhost:8025/websockets/abc', \n   @map(type='xml'))\ndefine stream Foo (attribute1 string, attribute2 int);  Under this configuration, events are received via the WebSocket server and they are passed to  Foo  stream for processing.", 
            "title": "websocket (Source)"
        }, 
        {
            "location": "/api/1.0.3/#websocket-server-source", 
            "text": "A Siddhi application can be configured to receive events via the WebSocket by adding the @Source(type = ?websocket-server?) annotation at the top of an event stream definition.  Syntax  @source(type= websocket-server , host= STRING , port= STRING , sub.protocol= STRING , idle.timeout= INT , tls.enabled= BOOL , keystore.path= STRING , keystore.password= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         host \n         host of the WebSocket server \n         \n         STRING \n         No \n         No \n     \n     \n         port \n         port of the WebSocket server \n         \n         STRING \n         No \n         No \n     \n     \n         sub.protocol \n         Sub-Protocols which are allowed by the service. The sub.protocol should adhere to  subprotocol1, subprotocol2,...  format. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         idle.timeout \n         Idle timeout of the connection. If the idle.timeout = '-1' then the timer is disabled. \n         -1 \n         INT \n         Yes \n         No \n     \n     \n         tls.enabled \n         This parameter specifies whether a secure connection is enabled or not. When this parameter is set to  true , the  keystore.path  and the  keystore.password  parameters are initialized. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         keystore.path \n         The file path to the location of the keystore. If a custom keystore is not specified, then the system uses the default keystore file - wso2carbon.jks in the  ${carbon.home}/resources/security  directory. \n         ${carbon.home}/resources/security/wso2carbon.jks \n         STRING \n         Yes \n         No \n     \n     \n         keystore.password \n         The password for the keystore. A custom password can be specified if required. If no custom password is specified, then the system uses  wso2carbon  as the default password. \n         wso2carbon \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @Source(type = ?websocket-server?, host='localhost', port='8025', \n   @map(type='xml'))\ndefine stream Foo (attribute1 string, attribute2 int);  Under this configuration, events are received via the WebSocket server and they are passed to  Foo  stream for processing.", 
            "title": "websocket-server (Source)"
        }, 
        {
            "location": "/api/latest/", 
            "text": "API Docs - v1.0.4-SNAPSHOT\n\n\nSink\n\n\nwebsocket \n(Sink)\n\n\nA Siddhi application can be configured to publish events via the Websocket transport by adding the @Sink(type = 'websocket') annotation at the top of an event stream definition.\n\n\n\nSyntax\n\n\n@sink(type=\nwebsocket\n, url=\nSTRING\n, sub.protocol=\nSTRING\n, headers=\nSTRING\n, idle.timeout=\nINT\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nurl\n\n        \nThe URL of the remote endpoint.\nThe url scheme should be either 'ws' or 'wss'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsub.protocol\n\n        \nThe negotiable sub-protocol if server is asking for it.\nThe sub.protocol should adhere to \nsubprotocol1, subprotocol2,...\n format.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheaders\n\n        \nAny specific headers which need to send to the server.\nThe headers should adhere to \n'key1:value1', 'key2:value2',...\n format.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nidle.timeout\n\n        \nIdle timeout of the connection\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Sink(type = 'websocket', url = 'ws://localhost:8025/abc', \n   @map(type='xml'))\ndefine stream Foo (attribute1 string, attribute2 int);\n\n\n\n\nA sink of type 'websocket' has been defined.\nAll events arriving at Foo stream via websocket will be sent to the url ws://localhost:8025/abc.\n\n\n\nwebsocket-server \n(Sink)\n\n\nA Siddhi application can be configured to publish events via the WebSocket transport by adding the @Sink(type = 'websocket-server') annotation at the top of an event stream definition.\n\n\n\nSyntax\n\n\n@sink(type=\nwebsocket-server\n, host=\nSTRING\n, port=\nSTRING\n, sub.protocol=\nSTRING\n, idle.timeout=\nINT\n, tls.enabled=\nBOOL\n, keystore.path=\nSTRING\n, keystore.password=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nhost\n\n        \nhost of the WebSocket server\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nport\n\n        \nport of the WebSocket server\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsub.protocol\n\n        \nSub-Protocols which are allowed by the service.\nThe sub.protocol should adhere to \nsubprotocol1, subprotocol2,...\n format.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nidle.timeout\n\n        \nIdle timeout of the connection. If the idle.timeout = '-1' then the timer is disabled.\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.enabled\n\n        \nThis parameter specifies whether a secure connection is enabled or not. When this parameter is set to \ntrue\n, the \nkeystore.path\n and the \nkeystore.password\n parameters are initialized.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nkeystore.path\n\n        \nThe file path to the location of the keystore. If a custom keystore is not specified, then the system uses the default keystore file - wso2carbon.jks in the \n${carbon.home}/resources/security\n directory.\n\n        \n${carbon.home}/resources/security/wso2carbon.jks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nkeystore.password\n\n        \nThe password for the keystore. A custom password can be specified if required. If no custom password is specified, then the system uses \nwso2carbon\n as the default password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Sink(type = 'websocket-server', host='localhost', port='9025', \n   @map(type='xml'))\ndefine stream Foo (attribute1 string, attribute2 int);\n\n\n\n\nA sink of type 'websocket-server' has been defined.\nAll events arriving at Foo stream via websocket-server will be sent to the url ws://localhost:9025/abc.\n\n\n\nSource\n\n\nwebsocket \n(Source)\n\n\nA Siddhi application can be configured to receive events via the WebSocket by adding the @Source(type = 'websocket') annotation at the top of an event stream definition.\nWhen this is defined the associated stream will receive events from the WebSocket server on the url defined in the system.\n\n\n\nSyntax\n\n\n@source(type=\nwebsocket\n, url=\nSTRING\n, sub.protocol=\nSTRING\n, headers=\nSTRING\n, idle.timeout=\nINT\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nurl\n\n        \nThe URL of the remote endpoint.\nThe url scheme should be either 'ws' or 'wss'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsub.protocol\n\n        \nThe negotiable sub-protocol if server is asking for it.\nThe sub.protocol should adhere to \nsubprotocol1, subprotocol2,...\n format.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheaders\n\n        \nAny specific headers which need to send to the server.\nThe headers should adhere to \n'key1:value1', 'key2:value2',...\n format.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nidle.timeout\n\n        \nIdle timeout of the connection\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Source(type = 'websocket', url = 'ws://localhost:8025/websockets/abc', \n   @map(type='xml'))\ndefine stream Foo (attribute1 string, attribute2 int);\n\n\n\n\nUnder this configuration, events are received via the WebSocket server and they are passed to \nFoo\n stream for processing. \n\n\n\nwebsocket-server \n(Source)\n\n\nA Siddhi application can be configured to receive events via the WebSocket by adding the @Source(type = 'websocket-server') annotation at the top of an event stream definition.\n\n\n\nSyntax\n\n\n@source(type=\nwebsocket-server\n, host=\nSTRING\n, port=\nSTRING\n, sub.protocol=\nSTRING\n, idle.timeout=\nINT\n, tls.enabled=\nBOOL\n, keystore.path=\nSTRING\n, keystore.password=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nhost\n\n        \nhost of the WebSocket server\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nport\n\n        \nport of the WebSocket server\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsub.protocol\n\n        \nSub-Protocols which are allowed by the service.\nThe sub.protocol should adhere to \nsubprotocol1, subprotocol2,...\n format.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nidle.timeout\n\n        \nIdle timeout of the connection. If the idle.timeout = '-1' then the timer is disabled.\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntls.enabled\n\n        \nThis parameter specifies whether a secure connection is enabled or not. When this parameter is set to \ntrue\n, the \nkeystore.path\n and the \nkeystore.password\n parameters are initialized.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nkeystore.path\n\n        \nThe file path to the location of the keystore. If a custom keystore is not specified, then the system uses the default keystore file - wso2carbon.jks in the \n${carbon.home}/resources/security\n directory.\n\n        \n${carbon.home}/resources/security/wso2carbon.jks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nkeystore.password\n\n        \nThe password for the keystore. A custom password can be specified if required. If no custom password is specified, then the system uses \nwso2carbon\n as the default password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Source(type = 'websocket-server', host='localhost', port='8025', \n   @map(type='xml'))\ndefine stream Foo (attribute1 string, attribute2 int);\n\n\n\n\nUnder this configuration, events are received via the WebSocket server and they are passed to \nFoo\n stream for processing.", 
            "title": "latest"
        }, 
        {
            "location": "/api/latest/#api-docs-v104-snapshot", 
            "text": "", 
            "title": "API Docs - v1.0.4-SNAPSHOT"
        }, 
        {
            "location": "/api/latest/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/latest/#websocket-sink", 
            "text": "A Siddhi application can be configured to publish events via the Websocket transport by adding the @Sink(type = 'websocket') annotation at the top of an event stream definition.  Syntax  @sink(type= websocket , url= STRING , sub.protocol= STRING , headers= STRING , idle.timeout= INT , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         url \n         The URL of the remote endpoint. The url scheme should be either 'ws' or 'wss'. \n         \n         STRING \n         No \n         No \n     \n     \n         sub.protocol \n         The negotiable sub-protocol if server is asking for it. The sub.protocol should adhere to  subprotocol1, subprotocol2,...  format. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         headers \n         Any specific headers which need to send to the server. The headers should adhere to  'key1:value1', 'key2:value2',...  format. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         idle.timeout \n         Idle timeout of the connection \n         -1 \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  @Sink(type = 'websocket', url = 'ws://localhost:8025/abc', \n   @map(type='xml'))\ndefine stream Foo (attribute1 string, attribute2 int);  A sink of type 'websocket' has been defined. All events arriving at Foo stream via websocket will be sent to the url ws://localhost:8025/abc.", 
            "title": "websocket (Sink)"
        }, 
        {
            "location": "/api/latest/#websocket-server-sink", 
            "text": "A Siddhi application can be configured to publish events via the WebSocket transport by adding the @Sink(type = 'websocket-server') annotation at the top of an event stream definition.  Syntax  @sink(type= websocket-server , host= STRING , port= STRING , sub.protocol= STRING , idle.timeout= INT , tls.enabled= BOOL , keystore.path= STRING , keystore.password= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         host \n         host of the WebSocket server \n         \n         STRING \n         No \n         No \n     \n     \n         port \n         port of the WebSocket server \n         \n         STRING \n         No \n         No \n     \n     \n         sub.protocol \n         Sub-Protocols which are allowed by the service. The sub.protocol should adhere to  subprotocol1, subprotocol2,...  format. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         idle.timeout \n         Idle timeout of the connection. If the idle.timeout = '-1' then the timer is disabled. \n         -1 \n         INT \n         Yes \n         No \n     \n     \n         tls.enabled \n         This parameter specifies whether a secure connection is enabled or not. When this parameter is set to  true , the  keystore.path  and the  keystore.password  parameters are initialized. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         keystore.path \n         The file path to the location of the keystore. If a custom keystore is not specified, then the system uses the default keystore file - wso2carbon.jks in the  ${carbon.home}/resources/security  directory. \n         ${carbon.home}/resources/security/wso2carbon.jks \n         STRING \n         Yes \n         No \n     \n     \n         keystore.password \n         The password for the keystore. A custom password can be specified if required. If no custom password is specified, then the system uses  wso2carbon  as the default password. \n         wso2carbon \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @Sink(type = 'websocket-server', host='localhost', port='9025', \n   @map(type='xml'))\ndefine stream Foo (attribute1 string, attribute2 int);  A sink of type 'websocket-server' has been defined. All events arriving at Foo stream via websocket-server will be sent to the url ws://localhost:9025/abc.", 
            "title": "websocket-server (Sink)"
        }, 
        {
            "location": "/api/latest/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/latest/#websocket-source", 
            "text": "A Siddhi application can be configured to receive events via the WebSocket by adding the @Source(type = 'websocket') annotation at the top of an event stream definition. When this is defined the associated stream will receive events from the WebSocket server on the url defined in the system.  Syntax  @source(type= websocket , url= STRING , sub.protocol= STRING , headers= STRING , idle.timeout= INT , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         url \n         The URL of the remote endpoint. The url scheme should be either 'ws' or 'wss'. \n         \n         STRING \n         No \n         No \n     \n     \n         sub.protocol \n         The negotiable sub-protocol if server is asking for it. The sub.protocol should adhere to  subprotocol1, subprotocol2,...  format. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         headers \n         Any specific headers which need to send to the server. The headers should adhere to  'key1:value1', 'key2:value2',...  format. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         idle.timeout \n         Idle timeout of the connection \n         -1 \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  @Source(type = 'websocket', url = 'ws://localhost:8025/websockets/abc', \n   @map(type='xml'))\ndefine stream Foo (attribute1 string, attribute2 int);  Under this configuration, events are received via the WebSocket server and they are passed to  Foo  stream for processing.", 
            "title": "websocket (Source)"
        }, 
        {
            "location": "/api/latest/#websocket-server-source", 
            "text": "A Siddhi application can be configured to receive events via the WebSocket by adding the @Source(type = 'websocket-server') annotation at the top of an event stream definition.  Syntax  @source(type= websocket-server , host= STRING , port= STRING , sub.protocol= STRING , idle.timeout= INT , tls.enabled= BOOL , keystore.path= STRING , keystore.password= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         host \n         host of the WebSocket server \n         \n         STRING \n         No \n         No \n     \n     \n         port \n         port of the WebSocket server \n         \n         STRING \n         No \n         No \n     \n     \n         sub.protocol \n         Sub-Protocols which are allowed by the service. The sub.protocol should adhere to  subprotocol1, subprotocol2,...  format. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         idle.timeout \n         Idle timeout of the connection. If the idle.timeout = '-1' then the timer is disabled. \n         -1 \n         INT \n         Yes \n         No \n     \n     \n         tls.enabled \n         This parameter specifies whether a secure connection is enabled or not. When this parameter is set to  true , the  keystore.path  and the  keystore.password  parameters are initialized. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         keystore.path \n         The file path to the location of the keystore. If a custom keystore is not specified, then the system uses the default keystore file - wso2carbon.jks in the  ${carbon.home}/resources/security  directory. \n         ${carbon.home}/resources/security/wso2carbon.jks \n         STRING \n         Yes \n         No \n     \n     \n         keystore.password \n         The password for the keystore. A custom password can be specified if required. If no custom password is specified, then the system uses  wso2carbon  as the default password. \n         wso2carbon \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @Source(type = 'websocket-server', host='localhost', port='8025', \n   @map(type='xml'))\ndefine stream Foo (attribute1 string, attribute2 int);  Under this configuration, events are received via the WebSocket server and they are passed to  Foo  stream for processing.", 
            "title": "websocket-server (Source)"
        }, 
        {
            "location": "/license/", 
            "text": "Copyright (c) 2017 WSO2 Inc. (\nhttp://www.wso2.org\n) All Rights Reserved.\n\n\nWSO2 Inc. licenses this file to you under the Apache License,\nVersion 2.0 (the \"License\"); you may not use this file except\nin compliance with the License.\nYou may obtain a copy of the License at\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\n\n-------------------------------------------------------------------------\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \nLicense\n shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \nLicensor\n shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \nLegal Entity\n shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \ncontrol\n means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \nYou\n (or \nYour\n) shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \nSource\n form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \nObject\n form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \nWork\n shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \nDerivative Works\n shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \nContribution\n shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \nsubmitted\n\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \nNot a Contribution.\n\n\n   \nContributor\n shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \nNOTICE\n text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \nAS IS\n BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS", 
            "title": "License"
        }
    ]
}